package {{.DirPackageName}}

import (
{{- if .NeedsJSONImport }}
	"encoding/json"
{{- end }}
	"net/http"
{{- if .NeedsContextImport }}
	"context"
{{- end }}
{{- if .NeedsStrconvImport }}
	"strconv"
{{- end }}
{{- if .NeedsFmtImport }}
	"fmt"
{{- end }}
{{- range $import, $used := .Imports }}
	"{{$import}}"
{{- end }}
	"github.com/Seann-Moser/go-serve/server/endpoints"
	"{{.ImportName}}"
)

{{- $parent := . }}

// {{toPascalCase .InterfaceName}}Handlers struct holds the interface implementation and endpoint list
type {{toPascalCase .InterfaceName}}Handlers struct {
	Impl         {{.PackageName}}.{{.InterfaceName}}
	EndpointList []*endpoints.Endpoint
}

// New{{toPascalCase $parent.InterfaceName}}Handlers creates a new Handlers instance
func New{{toPascalCase $parent.InterfaceName}}Handlers(impl {{.PackageName}}.{{.InterfaceName}}) *{{toPascalCase .InterfaceName}}Handlers {
	return &{{toPascalCase .InterfaceName}}Handlers{
		Impl:         impl,
		EndpointList: []*endpoints.Endpoint{},
	}
}

// RegisterRoutes registers all the HTTP routes by populating the endpoint list
func (h *{{toPascalCase .InterfaceName}}Handlers) RegisterRoutes() {
	h.EndpointList = []*endpoints.Endpoint{
	{{- range .Methods }}
		{
			SubDomain:        "",
			Redirect:         "",
			URLPath:          "{{.URLPath}}",
			PermissionLevel:  0,
			Role:             "",
			Roles:            nil,
			Method:           "{{.HTTPMethod}}",
			Methods:          []string{"{{.HTTPMethod}}"},
			ResponseTypeMap:  map[string]interface{}{"response": {{.ResponseType | or "nil"}}},
			RequestTypeMap:   map[string]interface{}{"request": {{.RequestType | or "nil"}}},
			QueryParams:      []string{ {{range $index, $param := .QueryParams}}{{if $index}}, {{end}}"{{$param}}"{{end}} },
		},
	{{- end }}
	}
}

{{range .Methods}}
// {{.HandlerName}} handles the {{.Name}} method
func (h *{{toPascalCase $parent.InterfaceName}}Handlers) {{.HandlerName}}(w http.ResponseWriter, r *http.Request) {
{{- if .HasContext }}
	ctx := r.Context()
{{- end }}

	// Parse Query Parameters
	{{- range .Params }}
	{{ $paramStr := getUniqueVarName (printf "%sStr" .Name) }}
	{{ $paramVar := .Name }}
	{{ $paramStr }} := r.URL.Query().Get("{{.Name}}")
	if {{ $paramStr }} == "" {
		http.Error(w, "Missing parameter: {{.Name}}", http.StatusBadRequest)
		return
	}
	{{- if eq .Type "string" }}
	{{ $paramVar }} := {{ $paramStr }}
	{{- else if eq .Type "int" }}
	{{ $paramVar }}, err := strconv.Atoi({{ $paramStr }})
	if err != nil {
		http.Error(w, "Invalid parameter: {{.Name}}", http.StatusBadRequest)
		return
	}
	{{- else }}
	// Add more type conversions as needed
	{{ if .IsPointer }}
	var {{ $paramVar }} *{{ if .Package }}{{.Package}}.{{ end }}{{.Type}}
	{{ else }}
	var {{ $paramVar }} {{ if .Package }}{{.Package}}.{{ end }}{{.Type}}
	{{ end }}
	if err := json.Unmarshal([]byte({{ $paramStr }}), &{{ $paramVar }}); err != nil {
		http.Error(w, "Invalid parameter format: {{.Name}}", http.StatusBadRequest)
		return
	}
	{{- end }}
	{{- end }}

	// Prepare arguments for the method call
	{{- $args := list }}
	{{- if .HasContext }}
	{{- $args = append $args "ctx" }}
	{{- end }}
	{{- range .Params }}
	{{- $args = append $args .Name }}
	{{- end }}
	{{- $argStr := join $args ", " }}

	// Call the interface method
	{{- if hasOnlyError .Returns }}
	err := h.Impl.{{.Name}}({{$argStr}})
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	{{- else if hasError .Returns }}
	{{- if hasMultiple .Returns }}
	{{- /* Assuming first return value is the result, and last is error */ -}}

	result, err := h.Impl.{{.Name}}({{$argStr}})
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	{{- if .ResponseType }}
	json.NewEncoder(w).Encode(result)
	{{- else }}
	// Handle response
	{{- end }}
	{{- else }}
	result, err := h.Impl.{{.Name}}({{$argStr}})
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	json.NewEncoder(w).Encode(result)
	{{- end }}
	{{- else }}
	// If no error is returned
	result := h.Impl.{{.Name}}({{$argStr}})
	{{- if .ResponseType }}
	json.NewEncoder(w).Encode(result)
	{{- else }}
	// Handle response
	{{- end }}
	{{- end }}

	// If no returns, respond with success
	{{- if not .Returns }}
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{"status": "success"})
	{{- end }}
}
{{end}}
